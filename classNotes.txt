Sept 29
Don't want multiple nodes in one cluster to point to same point
google k-means clusters
professor makes a point array called universe
10 points, 10 dims
uses a function to randomly allocate numbers


TEMPLATES

PA3 will have no extensions


<< and >> should be symmetric
points should come out as lines of doubles

add a node constructor to ensure valid nodes

can be third line in struct LNode
LNode(PointPtr pt, LNodePtr n) : p(pt), next(n) {}

+= and + should be set preserving
say we have 4 4d points allocated on heap. Two empty Clusters with only LNodePtr points. At one time, c1 adds one of the four points
to its self, then maybe another and links them. Say you wish to make c2 a copy of c1. What you do is have the LNodePointers point to same
point objects, but you're never duplicating points. Pointers are the set.

Were you to add both those clusters together, and since they have the same points, then the result would be a union  and the new cluster would basically be
a carbon copy of both.
In the case of += no changes would be make.
In the case of + no changes would be made but the temp c3 could be returned and assigned to another cluster or something.

Need to learn about sets, and understand specs on sets.

Need to learn about aliasing as well.

preprocessor - gets all cpp files

compiler - compiles, instantiates new types, when encountering templates or things. Adds an invisible cpp file to handle them
handles all templates, then determines their types while going through main. By that times the templates are full
fledged Types.

linker - works with all files


should make accessor functions const, like get dims and get coor

every member function has an invisible, implicit argument. The 'this' pointer.

STACK
-------
this
-------
arg 0
------
arg1
---------
locals
-------
return

friend funtions do not have the 'this' pointer passed in, because they're not member functions.

overloaded friend functions should be declared inline, not outside the class definition. Reason being because with
templates, int instantiations of the template could use the double instantiations of the template, and visa versa.
This is not desirable as it can introduce openings for trojans.


Exceptions are a mechanism that are used to define and constrain behavior of your types. Say with points, you wish
to rule out Points with zero dimensions. Or points with different dimensions.

Exception
-------------
detect + throw

and

catch + handle

try
{

    throw 8; // after throw nothing is executed

} catch(const int i)
{
    cout << i << endl;
}


try{
 throw string("division by 0 not allowed"); // throwing a char*

}catch(const string msg) {
cout << msg;
}
catch(...){
// catch all clause
// goes at end. after you rule out handling for cases you can
// do something about
}

prints out 8



try, means we'll be handling exceptions and we wish to handle them gracefully. If we put these in a try we can catch them.

October 6th

PA3

overload >> operator from point and cluster

count the commas in the file so the program know dimensionality

Centroid, private member of cluster
it is a point


loop over p:cluster

cen+= p

cent/= size// size of cluster

get overall mean of all points in cluster


to avoid overflow
add a bunch, calculate a mean, add a bunch, calculate a mean
sum the means

iterative
start with a bad guess, get better every time

non deterministic
get a different result depending on where you start
for our purposes we just pick 3 points

string line

for (i = 0; i < line.size; i++)
if(line[i] == 'thing'

inititailiztion

"
load up all points into one cluster, call it points space. we just need  a place to put all the points initially
say k = 5

make k - 1 empty clusters


pick k centroids from the one cluster, just peruse the points in your points space


distribute the centroids to empty clusters
!Don't confuse setting these first centroids with adding!
You give the centroids a point to define themselves, but this point is NOT part of the cluster.

The first PointsSpace cluster ends up being it's own cluster too (shrinks down while the empty ones grow), that's why you do k-1 empty clusters.

If you have the bug where a point is in two or more clusters, when that shouldn't happen,
this will show its self when you double delete a point.

delete ptr

delete ptr - this one will be a SIGABRT "pointer deleted that wasn't initialized or assigned"

"
Create a cluster point_space (the rest OPTIONAL) with __release_points set to true
Open data file and read in points into point_space
Pick k points to serve as initial centroids
Create k-1 empty clusters (the rest OPTIONAL) with __release_points set to false
Set the centroids of the the k clusters to the k points that were picked
Create double score, double scoreDiff
Set scoreDiff = CHANGE_THRESHOLD + 1

iterations
"
must look at all points of all clusters
use const pointers when looking points, probably..
Accessing the points.. could use [] operator. // but that has issues.

move class could actually do more than just perform
could also maybe figure out point removal and such, with comparing two clusters to see
if they need aa perform.

avoid overflow with static casting when you compute centroid

"


    loop until scoreDiff < CHANGE_THRESHOLD
        loop through all clusters
            loop through all points                    // find point that's closest to centroid?
                find the min distance(point, centroid) /// ?so min dist says hey, if this point is not within this distance to the cent, then it's gotta go
                if centroid not of current cluster
                    perform move(point, current, other)
        loop through all clusters
            if centroid invalid
                compute and set valid to true
        compute new clustering score
        compute absolute difference and set scoreDiff


teardown

write out the clustering results to a file
(OPTIONAL) move all points back to point_space by setting all other centroids to infinity
delete all clusters





for kmeans class to access points
since linked list is private, could overload [] of cluster

c[12]
basetype & op [] (int i); basetyoe = pointPtr

pointPtrs are implicit ID tags for points, with this implementation

Exceptions are part of RAII principle
basically, errors that you don't want to terminate program on, and continue on.

exceptions, syntax that allows break of regular execution flow. A way to handle anomalous input
from user.





























